import java.nio.file.Files
import java.nio.file.Path
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING
import static  org.gradle.api.tasks.testing.TestResult.ResultType;

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'



repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}
dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework:spring-jdbc")
    implementation('org.postgresql:postgresql')
    compile 'com.google.guava:guava:28.0-jre'

    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    testCompile('org.testng:testng:6.8')
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-test
    testCompile group: 'org.springframework.boot', name: 'spring-boot-test', version: '2.1.7.RELEASE'
    // https://mvnrepository.com/artifact/org.springframework/spring-test
    testCompile group: 'org.springframework', name: 'spring-test', version: '5.1.9.RELEASE'
    testRuntime group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'


}

def addWithOutput = "$buildDir/gen-addWith/main"

sourceSets {
    addWith {
        output.dir(addWithOutput, builtBy: 'addWith')
    }
}

jar {
  enabled = true
  duplicatesStrategy 'include'
  from sourceSets.addWith.output
}

bootJar {
    baseName = 'gs-spring-boot'
    version =  '0.1.0'
  duplicatesStrategy 'include'
  from sourceSets.addWith.output
}

bootRun {
  if (project.hasProperty('args')) {
    args project.args.split(',')
    println "set args - "
    println project.args.split(',')
  }
}

task addWith () {
  dependsOn compileJava
  inputs.files(compileJava.outputs.getFiles().getAsFileTree().matching{ include "**/*Build*" })
  outputs.dir(addWithOutput)
  doFirst {
    println "compileJava outputs:"
    compileJava.outputs.getFiles().getAsFileTree().each { output -> println output }
    println "=================="
    compileJava.outputs.getFiles().getAsFileTree().matching{ include "**/*Build*" }.each { output -> println output }
    println "=================="
  }
  doLast {
    compileJava.outputs.getFiles().getAsFileTree().matching{ include "**/*Build*" }.each { classFile ->
      println "classFile: " + classFile
      // TODO this must be a property of javaCompile ...  ??? sourceSets.main.output.classesDirs
      //def rel = classFile.toPath().relativize(Path.of("$buildDir/classes/java/main"))
      def rel = Path.of("$buildDir/classes/java/main").relativize(classFile.toPath())
      def dest = Path.of(addWithOutput).resolve(rel)
      println "rel:       " + rel
      println "dest:      " + dest
      //org.rwhitworth.asm.AddWith.main(file("../buildSrc/build/classes/java/main/org/rwhitworth/asm/AddWith.class").getAbsolutePath(),
      //                                 "/tmp/foo.class")
      dest.toFile().getParentFile().mkdirs()
      org.rwhitworth.asm.AddWith.main(classFile.getAbsolutePath(), dest.toString())
    //def src = file("build/classes/java/main/articles/model/Article\$ArticleBuilder.class").getAbsolutePath()
    //def tmp = "/tmp/Article\$ArticleBuilder.class"
    //org.rwhitworth.asm.AddWith.main(src, tmp)
    //    Files.move(Path.of(tmp), Path.of(src), REPLACE_EXISTING)
    }
  }
}

classes.dependsOn addWith

task addWidth2(dependsOn:jar, type:JavaExec) {
  main="org.rwhitworth.asm.AddWith"
  classpath= files( "/tmp", jar.archivePath )
  args = [
           "build/classes/java/main/org/rwhitworth/asm/AddWith.class"
         ]
}

task testArticle(dependsOn:jar, type:JavaExec) {
  doFirst{
    println("config: " + configurations.runtime)
    println("source: ")
    sourceSets.main.runtimeClasspath.each{println "${it}"}
  }
  main="articles.model.TestArticle"
  classpath = sourceSets.main.runtimeClasspath
}

task setupTestDb(type: Exec) {
    commandLine 'bin/setupTestDb.sh'
}

test {
  def succeeded = false
  def testResult
  dependsOn setupTestDb
  useTestNG {
    excludeGroups 'buildScriptTest'
  }
  ignoreFailures = true
  afterSuite { desc, result ->
    if (!desc.parent) {
      testResult = result
      if (result.resultType == ResultType.SUCCESS)
        succeeded = true
    }
  }
  doLast {
    if (!succeeded) {
      exec {
        commandLine 'open', reports.getHtml().getEntryPoint().toString()
      }
      throw new TestExecutionException(testResult.toString())
    }
  }
}

